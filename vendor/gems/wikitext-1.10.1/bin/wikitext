#!/usr/bin/env ruby
# Copyright 2008-2009 Wincent Colaiuta. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

require File.join(File.dirname(__FILE__), '..', 'ext', 'wikitext')
require File.join(File.dirname(__FILE__), '..', 'lib', 'wikitext', 'version')

module Wikitext
  module Tool
    INPUT_FILES = []

    def self.interactive?
      STDOUT.tty? && STDIN.tty? && INPUT_FILES.empty?
    end

    def self.pretty_print tokens
      tokens.each do |token|
        puts <<-END
    Token:          type: #{token.token_type}
                    line: #{token.line_start}..#{token.line_stop}   column: #{token.column_start}..#{token.column_stop}
                 pointer: #{token.start}..#{token.stop}
              code_point: #{token.code_point}
            string_value: #{token.string_value.inspect}

    END
      end
    end

    method = :parse
    ARGV.each do |arg|
      if arg =~ /\A--tok/
        method = :tokenize
      else
        INPUT_FILES << arg
      end
    end

    if interactive?
      begin
        require 'highline'
      rescue LoadError
        require 'rubygems'
        require 'highline'
      end
      puts "wikitext #{Wikitext::VERSION}"
      highline = HighLine.new
    end

    parser = Parser.new
    if INPUT_FILES.empty?
      begin
        while true
          puts highline.color('(Ctrl+D to process, Ctrl+C to exit)>>', :bold) if interactive?
          input = STDIN.read
          puts '-' * highline.output_cols if interactive?
          if method == :tokenize
            pretty_print parser.tokenize(input)
          else
            puts parser.parse(input)
          end
          puts '-' * highline.output_cols if interactive?
          exit unless interactive?
        end
      rescue Interrupt
      end
    else # we have INPUT_FILES
      exit_status = 0
      INPUT_FILES.each do |file|
        begin
          puts parser.parse(File.new(file).read)
        rescue Errno::ENOENT
          STDERR.puts "error: no such file or directory: #{file}"
          exit_status |= 1
        rescue Errno::EACCES
          STDERR.puts "error: permission denied: #{file}"
          exit_status |= 2
        end
      end
      exit exit_status
    end
  end # module Tool
end # module Wikitext

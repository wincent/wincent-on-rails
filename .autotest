Autotest.options[:no_full_after_start] = true
Autotest.options[:no_full_after_failed] = true

Autotest.add_hook :initialize do |a|
  all_specs = %r%^spec/.+_spec\.rb$%
  a.add_mapping(%r%^db/example_data\.rb$%) {
    a.files_matching all_specs
  }
  a.add_mapping(%r%^db/schema\.rb$%) {
    a.files_matching all_specs
  }

  # support scoping (at directory level, not file level); eg:
  #   bin/autotest app/models spec/models
  # see:
  #   http://blog.davidchelimsky.net/2008/03/05/limiting-scope-of-autotest
  unless ARGV.empty?
    a.find_directories = ARGV.dup
  end
end

Autotest.add_hook :ran_command do |a|
  output = [a.results].flatten.join("\n")
  results = output.slice %r{(\d+) examples?, (\d+) failures?(, (\d+) pending)?}
  if results
    passed, failed, pending = $~[1], $~[2], $~[4]
    if failed.to_i > 0
      system "growlnotify -n autotest --image ./autotest/fail.png -p Emergency -m '#{results}' -t 'Spec failure detected'"
    elsif pending.to_i > 0
      system "growlnotify -n autotest --image ./autotest/pending.png -p High -m '#{results}' -t 'Pending spec(s) present'"
    else
      system "growlnotify -n autotest --image ./autotest/pass.png -p 'Very Low' -m '#{results}' -t 'All specs passed'"
    end
  end
end

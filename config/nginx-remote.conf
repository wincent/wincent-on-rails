user rails rails;
pid /var/run/nginx.pid;
worker_processes 1; # default is 1 but let's be explicit

events {
  worker_connections 1024;
  accept_mutex off; # not needed when only 1 worker process
}

http {
  include mime.types;
  #default_type text/html;
  default_type application/octet-stream;

  # mimic the Apache "combined" log format, so log analysis tools can grok it:
  #  "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
  #  - IP address of the client (remote host)
  #  - RFC 1413 identity of client (identd)
  #  - userid of person making the request (HTTP authentication)
  #  - request time; for example: [10/Oct/2000:13:55:36 -0700]
  #    [2-digit day/3-letter month/4-digit year:2-digit hour:2-digit minute:2-digit second +/-4-digit zone]
  #  - request line (method, resource, protocol)
  #  - status code
  #  - returned object size
  #  - Referer from HTTP request header
  #  - User-Agent from HTTP request header
  log_format combined_proxy '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

  sendfile on;
  tcp_nopush on; # defaults to off (when on, useful for prepending headers before calling sendfile)

  gzip on;
  gzip_types text/plain
             text/javascript
             text/css
             text/xml
             application/x-javascript
             application/xml
             application/xml+atom
             application/xml+rss;
  gzip_proxied any; # default is "off" (no compression on proxied requests)
  gzip_http_version 1.0; # for CloudFront
  gzip_vary on; # for CloudFront

  upstream unicorn {
    # fail_timeout 0 causes nginx to retry upstream
    server unix:/data/rails/deploy/shared/unicorn.sock fail_timeout=0;
  }

  upstream apache {
    server elastic1.unixhosts.net:80;
  }

  # HTTP
  server {
    listen 80;
    server_name wincent.com;
    root /data/rails/deploy/current/public; # dummy: no direct HTTP requests will be served

    # hideous kludge necessary for now, proxy some specific requests back to
    # Apache on zenyatta.unixhosts.net
    location ~ /(a/|contact/|download\.php|favicon\.ico|files/|gfx/|gpl/|images/|index\.php|lgpl/|mirror/|registration/|robots.txt|s/|synergy/|webmail/|wincent_colaiuta.pgp.txt|xml-schema/) {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_redirect off;
      proxy_max_temp_file_size 0;
      proxy_pass http://apache;
    }

    # everything else goes to HTTPS and Unicorn/Rails on this machine
    location / {
      rewrite ^(.*) https://wincent.com$1 permanent;
    }

    client_body_temp_path /data/rails/deploy/shared/client_body_temp;
    fastcgi_temp_path /data/rails/deploy/shared/fast_cgi_temp;
    proxy_temp_path /data/rails/deploy/shared/proxy_temp;
    access_log /data/rails/deploy/shared/log/access_log combined_proxy;
  } # end: server

  # HTTPS
  server {
    listen 443 default ssl;
    server_tokens off;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate /usr/nginx/conf/certs/wincent.com.crt;
    ssl_certificate_key /usr/nginx/conf/keys/wincent.com.key.insecure;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;
    ssl_trusted_certificate /usr/nginx/conf/certs/root_ca_plus_intermediates.crt;
    ssl_dhparam /usr/nginx/conf/certs/wincent.com.dh1024.pem;

    # not supported:
    #ssl_stapling on;
    #ssl_stapling_verify on;
    #resolver 172.16.0.23;

    keepalive_timeout 70;
    server_name wincent.com;
    root /data/rails/deploy/current/public;

    set $static_root '/data/rails/deploy/shared/static';

    client_body_temp_path /data/rails/deploy/shared/client_body_temp;
    fastcgi_temp_path /data/rails/deploy/shared/fast_cgi_temp;
    proxy_temp_path /data/rails/deploy/shared/proxy_temp;
    access_log /data/rails/deploy/shared/log/access_log combined_proxy;
    error_log /data/rails/deploy/shared/log/error_log notice;
    error_page 500 502 504 /500.html;
    error_page 503 /maintenance.html;

    # rewrite all requests to rails.wincent.com back to wincent.com
    if ($host != wincent.com) {
      rewrite ^(.*) https://wincent.com$1 permanent;
    }

    # serve static content without hitting Rails
    # this also bypasses our maintenance page check
    location ~ ^/assets/ {
      gzip_static on;
      expires 1y;
      add_header Access-Control-Allow-Origin https://wincent.com;
      add_header Cache-Control public;
      add_header Last-Modified "";
      add_header ETag "";
      break;
    }

    location /system/maintenance.html {
      # always allow access to this file; explained here:
      # http://www.ruby-forum.com/topic/141251
    }

    location / {
      if (-f $document_root/system/maintenance.html) {
        error_page 503 /system/maintenance.html;
        return 503;
      }

      # cached pages: only for GET requests
      set $cache_extension '.html';

      if (-f $request_filename) {
        break;
      }

      set $index_filename 'index';

      if (-f $static_root$uri) {
        root $static_root;
        break;
      }

      if (-f $static_root${uri}index.html) {
        # URI has trailing slash
        root $static_root;
        rewrite (.*) $1$index_filename$cache_extension break;
      }

      if (-f $static_root$uri/index.html) {
        # URI has no trailing slash
        rewrite (.*) $1/ permanent;
      }

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X_FORWARDED_PROTO https;
      proxy_max_temp_file_size 0;
      if (!-f $request_filename) {
        proxy_pass http://unicorn;
        break;
      }
    }
  } # end: server
} # end: http

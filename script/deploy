#!/bin/sh
# Copyright 2009-2013 Wincent Colaiuta. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# deploy to:
SERVER=mondatta.unixhosts.net
DEPLOY=/data/rails/deploy
ENVIRONMENT=production

# clone source from:
REPO=elastic1.unixhosts.net:/pub/git/private/wincent.com.git
BRANCH=master

# misc vars:
LOGFILE=log/deploy.log

staging_environment_overrides() {
  if [ -z "$STAGING_SERVER" ]; then
    bail 'STAGING_SERVER environment variable not set'
  fi
  SERVER=$STAGING_SERVER
  ENVIRONMENT=staging
}

bail() {
  p "  failed: $@"
  exit 1
}

warn() {
  p "  warning: $@"
}

p() {
  echo "$@"
  log "$@"
}

log() {
  echo "$@" >> $LOGFILE
}

run() {
  set +e
  local REMOTE_USER=$1; shift
  log "Running remote command: $@"
  ssh -l $REMOTE_USER $SERVER "$@" 2>&1 >> $LOGFILE
  local EXIT_STATUS=$?
  if [ $EXIT_STATUS -ne 0 ]; then
    p "Failed remote command: $@"
    p "Exit status: $EXIT_STATUS"
    exit $EXIT_STATUS
  fi
  set -e
}

usage() {
  echo "Usage:"
  echo "  $0 [options] command..."
  echo ""
  echo "Deployment commands:"
  echo "        unlock    loosen permissions to enable deployment"
  echo "         check    check dependencies and prerequisites"
  echo "        deploy    clone repo and deploy"
  echo "       disable    display a maintenance page"
  echo "       migrate    migrate all databases"
  echo "        switch    update the symlink to point to the latest deployment"
  echo "       restart    restart cluster (changes go live)"
  echo "        enable    remove maintenance page"
  echo "       summary    print Git commits since the last deployment"
  echo "      lockdown    tighten permissions after deployment"
  echo ""
  echo "Other commands:"
  echo "        upload    upload comma-separated files specified in FILES environment variable"
  echo ""
  echo "Options:"
  echo "     --staging    deploy to staging environment (can abbreviate to \"staging\")"
  echo "     --rev=REF    deploy tag (eg. \"0.7\"), branch (eg. \"origin/maint\"), commit (SHA1)"
  echo "                  by default the HEAD of the master branch is deployed"
  echo ""
  echo "Example workflow:"
  echo "     # set an environment variable to indicate the staging server"
  echo "     export STAGING_SERVER=ec2-184-73-234-210.compute-1.amazonaws.com"
  echo ""
  echo "     # note how commands can be chained together:"
  echo "     $0 staging unlock check deploy"
  echo "     $0 staging disable migrate switch restart enable summary lockdown"
  echo ""
  echo "     # now we repeat in the production environment:"
  echo "     $0 unlock check deploy"
  echo "     $0 disable migrate switch restart enable summary lockdown"
  echo ""
  echo "     # the \"prep/finalize\" shorthand encapsulates the above patterns:"
  echo "     $0 staging prep"
  echo "     $0 staging finalize"
  echo "     $0 prep"
  echo "     $0 finalize"
  echo ""
  echo "     # the \"all\" shorthand is the same as \"prep\" then \"finalize\""
  echo "     $0 staging all"
  echo "     $0 all"
  exit
}

#
# main
#

# process arguments
while test $# != 0; do
  case "$1" in
    -h|--help|help)
      usage
      ;;
    --staging|staging|--stage|stage)
      staging_environment_overrides
      ;;
    --rev=*)
      test -z "$REF" || warn 'multiple revision arguments passed'
      REF="${1#--rev=}"
      ;;
    --revision=*)
      test -z "$REF" || warn 'multiple revision arguments passed'
      REF="${1#--revision=}"
      ;;
    unlock)
      DO_UNLOCK=true
      ;;
    wait) # undocumented but helpful to wait for "unlock" to take effect
      DO_WAIT=true
      ;;
    check)
      DO_CHECK=true
      ;;
    deploy)
      DO_DEPLOY=true
      ;;
    disable)
      DO_DISABLE=true
      ;;
    migrate)
      DO_MIGRATE=true
      ;;
    switch)
      DO_SWITCH=true
      ;;
    stop)  # not advertised in usage
      DO_STOP=true
      ;;
    start) # not advertised in usage
      DO_START=true
      ;;
    restart)
      DO_RESTART=true
      ;;
    enable)
      DO_ENABLE=true
      ;;
    summary)
      DO_SUMMARY=true
      ;;
    lock|lockdown)
      DO_LOCKDOWN=true
      ;;
    upload)
      DO_UPLOAD=true
      ;;
    prep)
      DO_UNLOCK=true
      DO_WAIT=true
      DO_CHECK=true
      DO_DEPLOY=true
      ;;
    finalize)
      DO_DISABLE=true
      DO_MIGRATE=true
      DO_SWITCH=true
      DO_RESTART=true
      DO_ENABLE=true
      DO_SUMMARY=true
      DO_LOCKDOWN=true
      ;;
    all)
      DO_UNLOCK=true
      DO_WAIT=true
      DO_CHECK=true
      DO_DEPLOY=true
      DO_DISABLE=true
      DO_MIGRATE=true
      DO_SWITCH=true
      DO_RESTART=true
      DO_ENABLE=true
      DO_SUMMARY=true
      DO_LOCKDOWN=true
      ;;
    *)
      usage
      ;;
  esac
  shift
done

# make sure the user asked us to at least do something
test -n "$DO_UNLOCK" \
  -o -n "$DO_WAIT" \
  -o -n "$DO_CHECK" \
  -o -n "$DO_DEPLOY" \
  -o -n "$DO_DISABLE" \
  -o -n "$DO_MIGRATE" \
  -o -n "$DO_SWITCH" \
  -o -n "$DO_STOP" \
  -o -n "$DO_START" \
  -o -n "$DO_RESTART" \
  -o -n "$DO_ENABLE" \
  -o -n "$DO_SUMMARY" \
  -o -n "$DO_UPLOAD" \
  -o -n "$DO_LOCKDOWN" || usage

trap 'test -n "$SUCCESS" || p "  error: aborted; see $LOGFILE for details"' EXIT

p "Starting deploy at: $(date)"
p "Environment for this session: $ENVIRONMENT"

if [ -n "$DO_UNLOCK" ]; then
   p "Processing command: unlock"
   run root chsh -s /bin/sh rails
fi

# useful because remote system sometimes won't notice "unlock" immediately
if [ -n "$DO_WAIT" ]; then
  p "Processing command: wait"
  sleep 15
fi

if [ -n "$DO_CHECK" ]; then
  p "Processing command: check"
  TMPDIR=$(mktemp -q -d /private/tmp/deploy.XXXXXX) || bail "could not create temporary directory"
  if [ -z "$REF" ]; then
    LOCAL_REF=$BRANCH
  else
    LOCAL_REF=$REF
  fi
  p "  checking: precompiled assets are available"
  bin/rake REF=$LOCAL_REF assets:deploy:check || bail "precompiled assets are not available (run rake REF=$LOCAL_REF assets:deploy:store)"
  p "  checking: generated static HTML files up-to-date"
  for HAML in $(ls app/views/public/*.html.haml); do
    git show $LOCAL_REF:$HAML > $TMPDIR/src.html.haml
    STATIC=${HAML%.haml}        # trim extension
    STATIC=${STATIC#app/views/} # trim leading directories
    git show $LOCAL_REF:$STATIC > $TMPDIR/static.html
    script/static $TMPDIR/src.html.haml $TMPDIR/out.html
    diff -q $TMPDIR/out.html $TMPDIR/static.html > /dev/null || bail "static version of $HAML not up-to-date in $LOCAL_REF (run: rake static:generate)"
  done
  p "  checking: directories exist and are writable"
  run rails test -d $DEPLOY
  run rails test -d $DEPLOY/shared
  run rails test -d $DEPLOY/releases
  run rails test -w $DEPLOY
  run rails test -w $DEPLOY/releases
  p "  checking: executables exist"
  run rails which gem git
  p "  checking: gem versions"
  run rails gem specification --version 1.5.2 bundler
  p "  checking: local branch vs remote branch"
  git diff --exit-code --quiet $BRANCH origin/$BRANCH || \
    warn "local $BRANCH differs from remote origin/$BRANCH -- did you remember to 'git push'?"
  p "  checking: currently checked out branch"
  CURRENT_BRANCH=$(git symbolic-ref HEAD 2> /dev/null)
  CURRENT_BRANCH=${CURRENT_BRANCH#refs/heads/}
  test "$CURRENT_BRANCH" = "$BRANCH" || \
    warn "currently on branch $CURRENT_BRANCH (expected $BRANCH) -- sure you're working on the right branch?"
  p "  checking: schema is up-to-date"
  env SCHEMA=$TMPDIR/schema.HEAD.rb bin/rake --silent db:schema:dump
  git show $LOCAL_REF:db/schema.rb > $TMPDIR/schema.REF.rb
  diff -q -b $TMPDIR/schema.REF.rb $TMPDIR/schema.HEAD.rb > /dev/null || \
    warn "current schema does not match $LOCAL_REF:db/schema.rb -- did you remember to run rake db:schema:dump and check in the result?"
  p "  checking: worktree is clean"
  git diff --quiet || \
    warn "worktree has uncommitted changes -- did the specs really pass against what you're going to deploy?"
fi

if [ -n "$DO_DEPLOY" ]; then
  p "Processing command: deploy"
  TIMESTAMP=$(date '+%Y%m%d%H%M%S')
  p "  timestamp: $TIMESTAMP"
  SHARED=$DEPLOY/shared
  MIRROR=$SHARED/mirror
  CHECKOUT=$DEPLOY/releases/$TIMESTAMP
  if [ -z "$REF" ]; then
    REMOTE_REF=origin/$BRANCH
  else
    REMOTE_REF=$REF
  fi
  ASSETS_SHA1=$(bin/rake REF=$REMOTE_REF assets:deploy:print_tag)
  run rails test ! -e $CHECKOUT
  run rails "test -d $MIRROR || git clone --quiet --recursive --mirror $REPO $MIRROR"
  run rails "cd $MIRROR && git fetch --quiet --recurse-submodules origin"
  run rails git clone --quiet --recursive $MIRROR $CHECKOUT
  run rails "cd $CHECKOUT && git checkout --quiet -b deploy $REMOTE_REF"
  run rails "cd $CHECKOUT && git submodule --quiet update --init"
  run rails "cd $CHECKOUT && (git rev-parse HEAD > $CHECKOUT/REVISION)"
  run rails "cd $CHECKOUT && git remote rm origin"
  run rails rm -rf $CHECKOUT/log \
                   $CHECKOUT/public/assets \
                   $CHECKOUT/public/system
  run rails ln -s $SHARED/log             $CHECKOUT/log
  run rails ln -s $SHARED/assets          $CHECKOUT/public/assets
  run rails ln -s $SHARED/system          $CHECKOUT/public/system
  run rails ln -s $SHARED/pids            $CHECKOUT/tmp/pids
  run rails ln -s $SHARED/database.yml    $CHECKOUT/config/database.yml
  run rails ln -s $SHARED/app_config.yml  $CHECKOUT/config/app_config.yml
  run rails rm -f $DEPLOY/latest
  run rails ln -s $CHECKOUT $DEPLOY/latest
  run rails "cd $CHECKOUT && \
             git read-tree -u --prefix=tmp/assets $ASSETS_SHA1"
  run rails "tar cpf - -C $CHECKOUT/tmp/assets . | \
             tar xpf - -C $CHECKOUT/public/assets"
  run rails "cd $CHECKOUT && \
             bundle install --quiet --deployment --local \
                            --path /data/rails/deploy/shared/bundle \
                            --without test"
fi

if [ -n "$DO_DISABLE" ]; then
  p "Processing command: disable"
  run rails cp $DEPLOY/current/public/maintenance.html \
               $DEPLOY/shared/system/maintenance.html
fi

if [ -n "$DO_MIGRATE" ]; then
  # we migrate all databases, not just production, as a sanity check
  p "Processing command: migrate"
  run rails "cd $DEPLOY/latest && bin/rake --silent RAILS_ENV=test db:migrate"
  run rails "cd $DEPLOY/latest && bin/rake --silent RAILS_ENV=development db:migrate"
  run rails "cd $DEPLOY/latest && bin/rake --silent RAILS_ENV=migrations db:migrate"
  run rails "cd $DEPLOY/latest && bin/rake --silent RAILS_ENV=production db:schema:dump"
  run rails "cd $DEPLOY/latest && \
             (git diff --quiet --ignore-space-change -- db/schema.rb || \
             (echo \"  failed: db/schema.rb out of sync with checked-in version\"; exit 1))"
fi

if [ -n "$DO_SWITCH" ]; then
  p "Processing command: switch"
  LATEST=$DEPLOY/latest
  CURRENT=$DEPLOY/current
  run rails test -d $LATEST
  run rails "rm -f $CURRENT && ln -s \$(readlink $LATEST) $CURRENT"
  REVISION=$(ssh rails@$SERVER cat $LATEST/REVISION)
  if [ ! $(git describe --exact-match $REVISION 2> /dev/null) ]; then
    TAG=$(git describe $(git rev-list --tags='0.*' --max-count=1) | awk -F . '{ printf "%d.%d", $1, $2 + 1}')
    if [ $ENVIRONMENT = staging ]; then
      warn "deployed version $REVISION is not yet tagged; would tag now as $TAG"
      p "  skipping: no tagging is performed in the staging environment"
    else
      warn "deployed version $REVISION is not yet tagged; tagging now as $TAG"
      git tag -m "Deployed $(LANG=en_GB.UTF-8; date '+%d %B %Y')." $TAG $REVISION
    fi
  fi
fi

if [ -n "$DO_STOP" ]; then
  p "Processing command: stop"
  run root monit stop unicorn
fi

if [ -n "$DO_RESTART" ]; then
  p "Processing command: restart"
  run root monit unmonitor unicorn
  MASTER=$(ssh rails@$SERVER cat /data/rails/deploy/shared/pids/unicorn.pid)
  run rails kill -USR2 $MASTER  # tell current master to fork a brand new master
  sleep 10                      # give new master a little time to boot up
  run rails kill -WINCH $MASTER # tell old master to allow old workers to die off
  run rails kill -QUIT $MASTER  # tell old master to go away once workers are done
  run root monit monitor unicorn
fi

if [ -n "$DO_START" ]; then
  p "Processing command: start"
  run root monit start unicorn
fi

if [ -n "$DO_ENABLE" ]; then
  p "Processing command: enable"
  run rails rm -f $DEPLOY/shared/system/maintenance.html
fi

if [ -n "$DO_SUMMARY" ]; then
  p "Processing command: summary"
  REVISION=$(ssh rails@$SERVER cat $DEPLOY/latest/REVISION)
  if [ $(git describe --exact-match $REVISION 2> /dev/null) ]; then
    # common case: latest deployed revision is tagged
    LAST_TAG=$(git for-each-ref --sort=-taggerdate --format='%(refname:short)' --count=2 'refs/tags/0.*' | tail -1)
  else
    # rare case (probably only staging): latest deployed revision is not tagged
    LAST_TAG=$(git describe $(git rev-list --tags --max-count=1))
  fi
  CURRENT_TAG=$(git describe $REVISION)
  p "----- start: changes from $LAST_TAG..$CURRENT_TAG -----"
  PAGER=cat git log --oneline --no-color --no-decorate --reverse $LAST_TAG..$REVISION
  p "-----   end: changes from $LAST_TAG..$CURRENT_TAG -----"
fi

if [ -n "$DO_UPLOAD" ]; then
  p "Processing command: upload"
  test -n "$FILES" || warn "nothing specified in FILES environment variable"
  (IFS=","
  for FILE in $FILES; do
    p "  file: $FILE"
    if [[ "$FILE" =~ ' ' ]]; then
      warn "\"$FILE\" contains a space; skipping"
    else
      scp $FILE rails@$SERVER:$DEPLOY/current/$FILE
    fi
  done)
fi

if [ -n "$DO_LOCKDOWN" ]; then
  p "Processing command: lockdown"
  run root chsh -s /sbin/nologin rails
fi

p "Finished deploy at: $(date)"
SUCCESS=true

#!/bin/sh -e

# base settings:
# note that we don't specify users, but rely on per-host defaults from
# ~/.ssh/config
REPO="/pub/git/private/wincent.com.git"
LOCKDOWN_HOST="wincent1.inetu.net"

# default settings for production environment:
SERVER="rails.wincent.com"
MONIT_GROUP="production"
BRANCH="origin/maint"
DEPLOY="/home/rails.wincent.com/deploy"
ENVIRONMENT="production"

staging_environment_overrides() {
  SERVER="kreacher.wincent.com"
  MONIT_GROUP="staging"
  BRANCH="origin/master"
  DEPLOY="/home/kreacher.wincent.com/deploy"
  ENVIRONMENT="staging"
}

usage() {
  echo "Usage:"
  echo "  $0 [options] command..."
  echo "Commands:"
  echo "        unlock    loosen permissions to enable deployment"
  echo "         check    check dependencies and prerequisites"
  echo "        deploy    clone repo and deploy"
  echo "  migrate_test    migrate test database only"
  echo "       migrate    migrate all databases"
  echo "      lockdown    tighten permissions after deployment"
  echo "Options:"
  echo "     --staging    deploy to staging environment"
  echo "     --rev=REF    deploy specified tag/branch/commit"
}

#
# main
#

trap 'test -n "$SUCCESS" || echo "error: aborted"' EXIT

# process arguments
while test $# != 0; do
  case "$1" in
    --staging|staging|--stage|stage)
      staging_environment_overrides
      ;;
    --rev=*)
      test -z "$REF" || echo "warn: multiple revision arguments passed"
      REF="${1#--rev=}"
      ;;
    --revision=*)
      test -z "$REF" || echo "warn: multiple revision arguments passed"
      REF="${1#--revision=}"
      ;;
    unlock)
      DO_UNLOCK=true
      ;;
    check)
      DO_CHECK=true
      ;;
    deploy)
      DO_DEPLOY=true
      ;;
    migrate_test)
      DO_MIGRATE_TEST=true
      ;;
    migrate)
      DO_MIGRATE=true
      ;;
    lockdown)
      DO_LOCKDOWN=true
      ;;
    *)
      usage
      ;;
  esac
  shift
done

echo "Environment for this session: $ENVIRONMENT"

if [ -n "$DO_UNLOCK" ]; then
   echo "Processing command: unlock"
   ssh -t $LOCKDOWN_HOST sudo chsh -s /bin/sh $SERVER
fi

if [ -n "$DO_CHECK" ]; then
  echo "Processing command: check"
  echo "  checking: directories exist and are writable"
  ssh $SERVER "sh -c '(test -d $DEPLOY          || (echo \"  failed -d: $DEPLOY\" && exit 1)) && \
                      (test -d $DEPLOY/shared   || (echo \"  failed -d: $DEPLOY\" && exit 1)) && \
                      (test -d $DEPLOY/releases || (echo \"  failed -d: $DEPLOY\" && exit 1)) && \
                      (test -w $DEPLOY          || (echo \"  failed -w: $DEPLOY\" && exit 1)) && \
                      (test -w $DEPLOY/releases || (echo \"  failed -w: $DEPLOY\" && exit 1))'"
  echo "  checking: executables exist"
  ssh $SERVER "sh -c 'which gem git > /dev/null'"
  echo "  checking: gem versions"
  ssh $SERVER "sh -c 'gem specification --version \">= 0.6\"   hpricot > /dev/null && \
                      gem specification --version \">= 1.3.1\" rubygems-update > /dev/null && \
                      gem specification --version \">= 0.9.1\" rack > /dev/null && \
                      gem specification --version \">= 1.0\" mkdtemp > /dev/null'"
  echo "  checking: local branch vs remote branch"
  LOCAL_BRANCH=${BRANCH#origin/}
  git diff --exit-code --quiet $LOCAL_BRANCH $BRANCH || \
    echo "  warning: local $LOCAL_BRANCH differs from remote $BRANCH: did you remember to 'git push'?"
  echo "  checking: currently checked out branch"
  CURRENT_BRANCH=$(git symbolic-ref HEAD 2> /dev/null)
  CURRENT_BRANCH=${CURRENT_BRANCH#refs/heads/}
  test "$CURRENT_BRANCH" = "$LOCAL_BRANCH" || \
    echo "  warning: currently on branch $CURRENT_BRANCH (expected $LOCAL_BRANCH) -- sure you're working on the right branch?"
fi

if [ -n "$DO_DEPLOY" ]; then
  echo "Processing command: deploy"
  TIMESTAMP=$(date '+%Y%m%d%H%M%S')
  echo "  timestamp: $TIMESTAMP"
  SHARED=$DEPLOY/shared
  CHECKOUT=$DEPLOY/releases/$TIMESTAMP
  if [ -z "$REF" ]; then
    REF=$BRANCH
  fi
  ssh $SERVER "sh -c '(test ! -e $TIMESTAMP || (echo \" failed: $CHECKOUT already exists\" && exit 1)) && \
                      git clone $REPO $CHECKOUT && \
                      cd $CHECKOUT && \
                      git checkout -b deploy $REF && \
                      (echo $TIMESTAMP > $CHECKOUT/REVISION) && \
                      rm -rf $CHECKOUT/log \
                             $CHECKOUT/public/system \
                             $CHECKOUT/tmp/pids && \
                      ln -s $SHARED/log    $CHECKOUT/log && \
                      ln -s $SHARED/system $CHECKOUT/public/system && \
                      ln -s $SHARED/pids   $CHECKOUT/tmp/pids && \
                      find $CHECKOUT/public/images \
                           $CHECKOUT/public/stylesheets \
                           $CHECKOUT/public/javascripts \
                           -exec touch {} + && \
                      ln -s $SHARED/database.yml    $CHECKOUT/config/database.yml && \
                      ln -s $SHARED/app_config.yml  $CHECKOUT/config/app_config.yml && \
                      rm -f $DEPLOY/latest && \
                      ln -s $CHECKOUT $DEPLOY/latest && \
                      cd $CHECKOUT && \
                      rake gems:clean && \
                      rake gems:build'"
fi

if [ -n "$DO_MIGRATE_TEST" ]; then
  echo "Processing command: migrate_test"
  ssh $SERVER "sh -c 'cd $DEPLOY/latest && rake RAILS_ENV=test db:migrate'"
fi

if [ -n "$DO_MIGRATE" ]; then
  echo "Processing command: migrate"
  ssh $SERVER "sh -c 'cd $DEPLOY/latest && \
                      rake RAILS_ENV=test         db:migrate && \
                      rake RAILS_ENV=development  db:migrate && \
                      rake RAILS_ENV=production   db:migrate'"
fi

if [ -n "$DO_LOCKDOWN" ]; then
  echo "Processing command: lockdown"
  ssh -t $LOCKDOWN_HOST sudo chsh -s /sbin/nologin $SERVER
fi

SUCCESS=true

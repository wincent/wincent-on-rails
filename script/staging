#!/usr/bin/env ruby

# trying to automate this:
# https://wincent.com/wiki/Cloning_an_EC2_instance_for_testing_purposes

module AWS
  module EBS
    class Volume
      ROOT_DEVICE = '/dev/sda1'
      DATA_DEVICE = '/dev/sdh'

      attr_reader   :device, :id_str, :start_time

      def initialize *attrs
        @device     = attrs.find { |attr| attr =~ %r{^/dev/.+} }
        @id_str     = attrs.find { |attr| attr =~ /^vol-[a-f0-9]+$/ }
        @start_time = attrs.find { |attr| attr =~ /^\d{4}-\d{2}-\d{2}/ }
      end

      def root_volume?
        device == ROOT_DEVICE
      end

      def data_volume?
        device == DATA_DEVICE
      end

      def latest_snapshot
        @latest_snapshot ||= AWS::EC2::Snapshot.all.sort.reverse.find do |snapshot|
          snapshot.vol_id == id_str && snapshot.completed?
        end
      end
    end # class Volume
  end # module EBS

  module EC2
    def self.run_ec2_command command, *args
      output = `ec2-#{command} #{args.join}`
      output.split("\n").map do |line|
        line.split("\t")
      end
    end

    class Snapshot
      # Hash for mapping from internal names to headers displayed in
      # e2-describe-snapshots output.
      HEADER_MAP = {
        'id_str'      => 'SnapshotId',
        'vol_id'      => 'VolumeId',
        'status'      => 'Status',
        'start_time'  => 'StartTime',
        'progress'    => 'Progress',
        'description' => 'Description'
      }

      attr_reader *(HEADER_MAP.keys.map { |key| key.to_sym })

      def self.all
        @snapshots ||= get_all_snapshots
      end

      class << self
      private
        def get_all_snapshots
          snapshots = EC2.run_ec2_command('describe-snapshots', '-H')
          headers = snapshots.shift
          snapshots.map do |snapshot|
            raise "unexpected output format: #{snapshot}" unless snapshot.shift == 'SNAPSHOT'
            attrs = {}
            HEADER_MAP.each do |key, value|
              attrs[key] = snapshot[headers.find_index { |header| header == value }]
            end
            Snapshot.new attrs
          end
        end
      end

      def initialize attrs
        attrs.each do |key, value|
          instance_variable_set("@#{key}".to_sym, value)
        end
      end

      def <=>(other)
        raise ArgumentError, "incompatible class: #{other.class}" unless other.is_a?(Snapshot)
        start_time <=> other.start_time
      end

      def completed?
        status == 'completed' && progress == '100%'
      end
    end # class Snapshot

    class Reservation
      attr_reader :group

      def initialize *attrs
        @group = attrs.last or raise ArgumentError, 'nil group'
      end

      def rails?
        @group == 'rails'
      end
    end # class Reservation

    class Zone
      # Retun a list of all zones.
      def self.all
        @zones ||= get_all_zones
      end

      class << self
      private
        def get_all_zones
          zones = EC2.run_ec2_command('describe-availability-zones', '-H')
          index = zones.shift.find_index { |header| header == 'Name' }
          raise '"Name" header not found' unless index
          zones.map { |zone| zone[index] }
        end
      end
    end # class Zone

    class Instance
      attr_reader :ebs_volumes, :reservation

      # Wrapper for ec2-describe-instances
      # Optionally takes an instance ID to return information about a specific
      # instance; if omitted, returns information about all instances.
      # Returns an array of records, where each record comprises another array
      # containing fields.
      def self.describe_instances instance = nil
        EC2.run_ec2_command 'describe-instances', instance.to_s
      end

      # Returns a list of known instance IDs
      def self.instance_ids
        describe_instances.find_all do |instance|
          instance.first == 'INSTANCE'
        end.map do |instance|
          instance[1]
        end
      end

      def initialize id_str
        raise ArgumentError, 'nil id_str' if id_str.nil?
        @instance_data  = self.class.describe_instances id_str
        @instance_attrs = attributes_for_type('INSTANCE').first
        @ebs_volumes    = attributes_for_type('BLOCKDEVICE').map do |attrs|
          EBS::Volume.new *attrs
        end
        @reservation    = Reservation.new(*(attributes_for_type('RESERVATION').first))
      end

      def id_str
        attribute_matching /^i-[0-9a-f]+$/
      end

      def ami_id
        attribute_matching /^ami-[0-9a-f]+$/
      end

      def kernel_id
        attribute_matching /^aki-[0-9a-f]+$/
      end

      def ramdisk_id
        attribute_matching /^ari-[0-9a-f]+$/
      end

      def zone
        regexp = Zone.all.each do |zone|
          Regexp.escape(zone)
        end.join('|')
        attribute_matching /^(#{regexp})$/
      end

      def rails?
        @reservation.rails?
      end
    private

      # Introspects the instance data for records matching the specified type.
      # Returns an array of attributes for each matching record.
      def attributes_for_type type
        @instance_data.find_all do |record|
          record.first == type
        end.map do |record|
          record[1..-1] # drop type field: BLOCKDEVICE, INSTANCE, RESERVATION
        end
      end

      def attribute_matching regex
        @instance_attrs.find { |attr| attr.match regex }
      end
    end # class Instance
  end # module EC2
end # module AWS

require 'pp'

ids = AWS::EC2::Instance.instance_ids
ids.each do |id_str|
  instance = AWS::EC2::Instance.new(id_str)
  if instance.reservation.rails?
    puts "Rails instance ID: #{instance.id_str}"
    instance.ebs_volumes.map do |vol|
      puts "Latest snapshot for #{vol.id_str}: #{vol.latest_snapshot.id_str}"
    end

    # register a new snapshot
    root_volume = instance.ebs_volumes.find { |vol| vol.root_volume? }
    now = Time.now
    now = now.strftime('%Y-%m-%d-') + now.to_i.to_s
    puts "ec2-register -n rails-snapshot-#{now} " \
         "-d 'Rails instance snapshot #{now}' " \
         "--root-device-name #{AWS::EBS::Volume::ROOT_DEVICE} " \
         "-b #{AWS::EBS::Volume::ROOT_DEVICE}=#{root_volume.latest_snapshot.id_str}"

    # the above will give us an AMI ID
    ami_id = 'ami-feedface'
    puts "ec2-run-instances -z #{instance.zone} " \
         "--key ec2instancekey " \
         "-g rails " \
         "--kernel #{instance.kernel_id} " \
         "--ramdisk #{instance.ramdisk_id} " \
         "#{ami_id}"
  end
end

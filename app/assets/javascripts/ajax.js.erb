// Copyright 2009-2013 Wincent Colaiuta. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

var globalSpinnerCounter = 0;

function escapeHTML(html) {
  return html
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
}

function insertAJAXFlash(cssClass, msg) {
  $('#ajax-flash')
    .append($('<div/>', { 'class': cssClass, html: escapeHTML(msg) }))
    .show();
}

function clearAJAXFlash() {
  $('#ajax-flash')
    .fadeOut('slow', function() { $(this).hide(); })
    .empty();
}

function ajaxCommentForm(url) {
  var $commentDiv = $('#comment-form'),
      $anchor = $commentDiv.find('a').attr('href', '#comment-form');
  var click = function() {
    $anchor.off('click').addClass('disabled');
    var $spinner = $('<img/>', {
      alt     : 'Spinner',
      id      : 'spinner_' + globalSpinnerCounter++,
      'class' : 'spinner',
      src     : '<%= asset_path 'spinner.gif' %>'
    });
    $commentDiv.append($spinner.show());
    clearAJAXFlash();
    $.ajax({
      url       : url,
      type      : 'get',
      dataType  : 'html',
      success   : function(html) {
        clearAJAXFlash();
        $commentDiv.append(html).find('.links').hide();
      },
      error: function(req) {
        insertAJAXFlash('error', req.responseText);
        $anchor.on('click', click);
      },
      complete: function() {
        $spinner.remove();
        $anchor.removeClass('disabled');
      }
    });
  }
  $anchor.on('click', click);
}

function editInPlace(selector, className, attributeName, url) {
  var model = $(selector); // could be many
  model.each(function(i) {
    var modelId = $(this).attr('id'), // issue_22
        recordId = modelId.match(/_(\d+)$/)[1], // 22
        $fieldId = $('#' + modelId + '_' + attributeName); // issue_22_summary
    function highlight() { $fieldId.addClass('highlight'); }
    function unhighlight() { $fieldId.removeClass('highlight'); }
    function clickFunction() {
      $fieldId.off('mousenter mouseleave'); // remove 'hover' handlers
      var fieldText = $fieldId.text();
      unhighlight();
      $fieldId.attr('title', 'Click outside to abort editing')
        .html('<form action="javascript:void(0)" style="display:inline;"><input type="text" value="' +
          escapeHTML(fieldText) +
          '"></form>')
        .find('input')[0].select();
      $fieldId.off('dblclick')
        .find('input').on('blur', function() {
          $fieldId.text(fieldText)
            .on('dblclick', clickFunction)
            .hover(highlight, unhighlight);
        }).end()
        .find('form').on('submit', function() {
          var value = $fieldId.find('input').val();
          $fieldId.text('saving...');
          $.ajax({
            'url': url + recordId,
            'type': 'post',
            'dataType': 'json',
            'data': '_method=put&' + className + '[' + attributeName + ']=' +
              encodeURIComponent(value),
            'success': function(json) {
              $fieldId.text(json[className][attributeName])
                .removeClass('ajax_error');
              clearAJAXFlash();
            },
            'error': function(req) {
              $fieldId.text(value).addClass('ajax_error');
              insertAJAXFlash('error', req.responseText);
            },
            'complete': function() {
              $fieldId.hover(highlight, unhighlight)
                .on('dblclick', clickFunction);
            }
          });
        });
    }
    $fieldId.attr('title', 'Double-click to edit')
      .on('dblclick', clickFunction)
      .hover(highlight, unhighlight);
  });
}

function ajaxCheckBox(selector, className, attributeName, url) {
  var modelId = $(selector).attr('id'), // issue_22
      recordId = modelId.match(/_(\d+)$/)[1], // 22
      $fieldId = $('#' + modelId + '_' + attributeName), // issue_22_public
      fieldText = $fieldId.text(), // eg. true, false
      spinnerId = 'spinner_' + globalSpinnerCounter++,
      newContents = '<input id="' + className + '_' + attributeName +
    '" name="' + className + '[' + attributeName + ']" type="checkbox">' +
    '<img alt="Spinner" id="' + spinnerId + '" class="spinner" src="<%= asset_path 'spinner.gif' %>" />';
  $fieldId.html(newContents);
  var checkBoxId = $fieldId.find('input');
  if (fieldText === 'true') {
    checkBoxId.prop('checked', true);
    }
  var oldProp = checkBoxId.prop('checked');
  checkBoxId.change(function() {
    var $spinner = $fieldId.find('#' + spinnerId).show();
    $.ajax({
      'url': url + recordId,
      'type': 'post',
      'dataType': 'json',
      'data': '_method=put&' + className + '[' + attributeName + ']=' +
        checkBoxId.prop('checked'),
      'success': function(json) {
        oldProp = checkBoxId.prop('checked');
        clearAJAXFlash();
      },
      'error': function(req) {
        checkBoxId.prop('checked', oldProp);
        insertAJAXFlash('error', req.responseText);
      },
      'complete': function() {
        $spinner.hide();
      }
    });
  });
}

function ajaxSelect(selector, className, attributeName, options, includeBlank, url) {
  var modelId = $(selector).attr('id'), // issue_22
      recordId = modelId.match(/_(\d+)$/)[1], // 22
      $fieldId = $('#' + modelId + '_' + attributeName), // issue_22_status
      fieldText = $fieldId.text(), // eg. New, Open, Closed
      spinnerId = 'spinner_' + globalSpinnerCounter++,
      newContents = '<select id="' + className + '_' + attributeName + '" name="' + className + '[' + attributeName + ']">';
  if (includeBlank) {
    newContents = newContents + '<option value=""></option>';
  }
  var selectionFound = false;

  // helper function to reduce duplication below
  function optionTag(opt) {
    var tag = '';
    for (var i = 0; i < opt.length; i++) {
      if (fieldText === opt[i][0]) {
        tag = tag + '<option value="' + opt[i][1] + '" selected="selected">' + opt[i][0] + '</option>';
        selectionFound = true;
      } else {
        tag = tag + '<option value="' + opt[i][1] + '">' + opt[i][0] + '</option>';
      }
    }
    return tag;
  };

  if (options.length > 0 && options[0].length >= 2 && (options[0][1] instanceof Array))
  {
    // we have an array of arrays of arrays: this is the optgroup case
    for (var i = 0; i < options.length; i++) {
      newContents += '<optgroup label="' + options[i][0] + '">' +
        optionTag(options[i][1]) + '</optgroup>';
    }
  }
  else { // non-optgroup case
    newContents += optionTag(options);
  }
  newContents += '</select><img alt="Spinner" id="' + spinnerId + '" class= "spinner" src="<%= asset_path 'spinner.gif' %>" />';
  $fieldId.html(newContents);
  var selectId = $fieldId.find('select');
  if (!selectionFound) {
    if (!includeBlank) {
      alert('failed to find selection');
      return; // programmer error! bail
    } else {
      // if none of the options match, eg "no product", must be the "blank" option
      selectId.find('option:first').prop('selected', true);
    }
  }
  var oldVal = $fieldId.find('select option:selected').text();
  selectId.change(function() {
    var $spinner = $fieldId.find('#' + spinnerId).show();
    $.ajax({
      'url': url + recordId,
      'type': 'post',
      'dataType': 'json',
      'data': '_method=put&' + className + '[' + attributeName + ']=' +
        selectId.val(),
      'success': function(json) {
        oldVal = $fieldId.find('select option:selected').text();
        clearAJAXFlash();
      },
      'error': function(req) {
        selectId.val(oldVal);
        insertAJAXFlash('error', req.responseText);
      },
      'complete': function() {
        $spinner.hide();
      }
    });
  });
}

function setupPreviewLink(options) {
  $('#preview_link').append('<a href="#">' +
      '<img src="<%= asset_path 'update.png' %>" alt="refresh" />' +
    '</a>' +
    '<img id="preview_spinner" src="<%= asset_path 'spinner.gif' %>" alt="spinner" />');
  $('#preview_link a').on('click', function() {
    $('#preview_spinner').show();
    var data = [],
        max = options['include'].length;
    for (var i = 0; i < max; i++) {
      var included = $('#' + options['kind'] + '_' +
        options['include'][i]).val();
      data.push(options['include'][i] +'=' + encodeURIComponent(included));
    }
    $.ajax({
      'url': options['url'],
      'type': 'post',
      'dataType': 'html',
      'data': data.join('&'),
      'success': function(html) {
        $('#preview').html(html).syntaxHighlight();
        clearAJAXFlash();
      },
      'error': function(req) {
        insertAJAXFlash('error', req.responseText);
      },
      'complete': function() { $('#preview_spinner').hide(); }
    });
    return false;
  });
}

function observeField(options) {
  // defaults
  var $field = options['field'] || $('#' + options['kind'] + '_' + options['fieldName']),
      interval = (options['interval'] || 30) * 1000,
      before = options['before'] || function() { $('#preview_spinner').show(); },
      success = options['success'] || function(html) {
        $('#preview').html(html).syntaxHighlight();
        clearAJAXFlash();
      },
      error = options['error'] || function(req) {
        insertAJAXFlash('error', req.responseText);
      },
      complete = options['complete'] || function() { $('#preview_spinner').hide(); };

  if (typeof window.observed_field_contents === 'undefined')
    window.observed_field_contents = {};
  window.observed_field_contents[$field.attr('id')] = $field.val();
  setInterval(function() {
    var new_content = $field.val(),
        old_content = window.observed_field_contents[$field.attr('id')];
    if (new_content !== old_content) {
      before();
      var data = options['fieldName'] + '=' + encodeURIComponent(new_content);
      if (options['include']) {
        var max = options['include'].length;
        for (var i = 0; i < max; i++) {
          var included = $('#' + options['kind'] + '_' +
            options['include'][i]).val();
          data += '&' + options['include'][i] +'=' +
            encodeURIComponent(included);
        }
      }
      $.ajax({
        'url': options['url'],
        'type': 'post',
        'dataType': 'html',
        'data': data,
        'success': success,
        'error': error,
        'complete': function() {
          complete();
          // regardless of success/failure, only try to submit once
          window.observed_field_contents[$field.attr('id')] = new_content;
        }
      });
    }
  }, interval);
}
